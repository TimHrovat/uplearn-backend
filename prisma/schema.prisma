// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id          Int      @id @default(autoincrement())
  name        String
  surname     String
  dateOfBirth DateTime

  email     String
  password  String
  createdAt DateTime @default(now())

  class   Class @relation(fields: [classId], references: [id])
  classId Int   @unique
}

model Employee {
  id          Int      @id @default(autoincrement())
  name        String
  surname     String
  dateOfBirth DateTime

  email     String
  password  String
  createdAt DateTime @default(now())

  role EmployeeRole

  classTeacher           ClassTeacher?
  substituteClassTeacher SubstituteClassTeacher?
  teaches                TeachesSubject[]
}

enum EmployeeRole {
  principal
  admin
  teacher
}

model Subject {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  subject     TeachesSubject[]
}

model TeachesSubject {
  employee   Employee @relation(fields: [employeeID], references: [id])
  employeeID Int      @unique

  subject   Subject @relation(fields: [subjectID], references: [id])
  subjectID Int     @unique

  Lesson       Lesson[]
  TeachesClass TeachesClass[]

  @@id([employeeID, subjectID])
}

model TeachesClass {
  teaches    TeachesSubject @relation(fields: [employeeID, subjectID], references: [employeeID, subjectID])
  employeeID Int            @unique
  subjectID  Int            @unique

  class   Class @relation(fields: [classID], references: [id])
  classID Int   @unique

  @@id([employeeID, subjectID, classID])
}

model ClassTeacher {
  class   Class @relation(fields: [classID], references: [id])
  classID Int   @unique

  employee   Employee @relation(fields: [employeeID], references: [id])
  employeeID Int      @unique

  @@id([classID, employeeID])
}

model SubstituteClassTeacher {
  class   Class @relation(fields: [classID], references: [id])
  classID Int   @unique

  employee   Employee @relation(fields: [employeeID], references: [id])
  employeeID Int      @unique

  @@id([classID, employeeID])
}

model Class {
  id                     Int                     @id @default(autoincrement())
  name                   String
  students               Student[]
  classTeacher           ClassTeacher?
  substituteClassTeacher SubstituteClassTeacher?
  Lesson                 Lesson[]
  TeachesClass           TeachesClass[]
}

model Classroom {
  id     Int      @id @default(autoincrement())
  name   String
  floor  Int
  Lesson Lesson[]
}

model SchoolHour {
  id        Int      @id @default(autoincrement())
  hour      Int      @unique // prva ura, druga ura...
  startTime DateTime @unique
  Lesson    Lesson[]
}

model Lesson {
  schoolHour   SchoolHour @relation(fields: [schoolHourID], references: [id])
  schoolHourID Int

  class   Class @relation(fields: [classID], references: [id])
  classID Int

  classRoom   Classroom @relation(fields: [classRoomID], references: [id])
  classRoomID Int

  teaches    TeachesSubject @relation(fields: [employeeID, subjectID], references: [employeeID, subjectID])
  employeeID Int
  subjectID  Int

  date DateTime

  @@id([schoolHourID, classID, classRoomID, subjectID, date])
}
