generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id String @id @default(uuid())

    name        String
    surname     String
    username    String   @unique
    email       String
    gsm         String?
    dateOfBirth DateTime

    firstPasswordReplaced Boolean @default(false)
    firstPassword         String?
    password              String

    resetPasswordToken String?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    role Role

    Employee Employee?
    Student  Student?
}

enum Role {
    employee
    student
    admin
}

model Employee {
    id String @unique @default(uuid())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique

    Employee_Subject       Employee_Subject[]
    ClassTeacher           Class?             @relation("class-teacher")
    SubstituteClassTeacher Class?             @relation("substitute-class-teacher")
    SubstituteLesson       Lesson[]
    Event_Teacher          Event_Employee[]
    EmployeeGrade          EmployeeGrade[]

    @@id([id, userId])
}

model Subject {
    abbreviation String  @id
    name         String
    description  String?

    Employee_Subject    Employee_Subject[]
    Subject_SubjectList Subject_SubjectList[]
    Grade               Grade[]
}

model Employee_Subject {
    employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
    employeeId String

    subject             Subject @relation(fields: [subjectAbbreviation], references: [abbreviation], onDelete: Cascade)
    subjectAbbreviation String

    Employee_Subject_Class Employee_Subject_Class[]
    Lesson                 Lesson[]

    @@id([employeeId, subjectAbbreviation])
}

model SubjectList {
    id   String @id @default(uuid())
    name String

    Subject_SubjectList Subject_SubjectList[]
    Class               Class[]
}

model Subject_SubjectList {
    subject             Subject @relation(fields: [subjectAbbreviation], references: [abbreviation], onDelete: Cascade)
    subjectAbbreviation String

    subjectList   SubjectList @relation(fields: [subjectListId], references: [id], onDelete: Cascade)
    subjectListId String

    @@id([subjectAbbreviation, subjectListId])
}

model Class {
    name String @id
    year Int

    subjectList   SubjectList? @relation(fields: [subjectListId], references: [id], onDelete: Restrict)
    subjectListId String?

    Employee_Subject_Class Employee_Subject_Class[]
    Student                Student[]

    classTeacher   Employee? @relation(name: "class-teacher", fields: [classTeacherId], references: [id], onDelete: Restrict)
    classTeacherId String?   @unique

    substituteClassTeacher   Employee? @relation(name: "substitute-class-teacher", fields: [substituteClassTeacherId], references: [id], onDelete: Restrict)
    substituteClassTeacherId String?   @unique

    Lesson      Lesson[]
    Event_Class Event_Class[]
}

model Employee_Subject_Class {
    employee_Subject    Employee_Subject @relation(fields: [employeeId, subjectAbbreviation], references: [employeeId, subjectAbbreviation], onDelete: Cascade)
    employeeId          String
    subjectAbbreviation String

    class     Class  @relation(fields: [className], references: [name], onDelete: Cascade)
    className String

    @@id([subjectAbbreviation, className])
}

model Student {
    id String @unique @default(uuid())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique

    class     Class?  @relation(fields: [className], references: [name], onDelete: SetNull)
    className String?

    Grade         Grade[]
    Absence       Absence[]
    EmployeeGrade EmployeeGrade[]

    @@id([id, userId])
}

model SchoolYear {
    id        String    @id @default(uuid())
    startDate DateTime  @db.Date
    endDate   DateTime  @db.Date
    Grade     Grade[]
    Absence   Absence[]
}

model Grade {
    id String @id @default(uuid())

    value       Int
    type        GradeType
    description String?
    createdAt   DateTime  @default(now())

    student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
    studentId String

    schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
    schoolYearId String

    subject             Subject @relation(fields: [subjectAbbreviation], references: [abbreviation], onDelete: Cascade)
    subjectAbbreviation String
}

enum GradeType {
    ORAL
    WRITTEN
    OTHER
}

model SchoolHour {
    id        String   @id @default(uuid())
    startTime DateTime @unique @db.Time()
    endTime   DateTime @unique @db.Time()
    Lesson    Lesson[]
}

model Classroom {
    name   String        @id
    type   ClassroomType @default(NORMAL)
    Lesson Lesson[]
}

enum ClassroomType {
    NORMAL
    LAB
    GYM
    COMPUTER
}

model Lesson {
    id String @id @default(uuid())

    description String?
    date        DateTime   @db.Date
    type        LessonType @default(NORMAL)
    lessonGroup String?

    employee_Subject    Employee_Subject? @relation(fields: [employeeId, subjectAbbreviation], references: [employeeId, subjectAbbreviation], onDelete: Cascade)
    employeeId          String?
    subjectAbbreviation String?

    substituteEmployee   Employee? @relation(fields: [substituteEmployeeId], references: [id], onDelete: Cascade)
    substituteEmployeeId String?

    class     Class  @relation(fields: [className], references: [name], onDelete: Cascade)
    className String

    classroom     Classroom @relation(fields: [classroomName], references: [name], onDelete: Cascade)
    classroomName String

    schoolHour   SchoolHour @relation(fields: [schoolHourId], references: [id], onDelete: Cascade)
    schoolHourId String

    Absence Absence[]
}

enum LessonType {
    NORMAL
    SUBSTITUTE
    GRADING
}

model Absence {
    id String @id @default(uuid())

    state AbsenceState @default(UNEXCUSED)

    lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId String

    student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
    studentId String

    schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
    schoolYearId String
}

enum AbsenceState {
    EXCUSED
    UNEXCUSED
}

model Event {
    id String @id @default(uuid())

    date      DateTime  @db.Date
    startTime String?
    endTime   String?
    type      EventType

    description String?

    Event_Teacher Event_Employee[]
    Event_Class   Event_Class[]
}

model Event_Employee {
    event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId String

    employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
    employeeId String

    @@id([eventId, employeeId])
}

model Event_Class {
    event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId String

    class     Class  @relation(fields: [className], references: [name], onDelete: Cascade)
    className String

    @@id([eventId, className])
}

model EmployeeGrade {
    id String @id @default(uuid())

    value Int
    comment String?

    employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
    employeeId String

    student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
    studentId String
}

enum EventType {
    ACT // activity
    HOLLIDAY
}
